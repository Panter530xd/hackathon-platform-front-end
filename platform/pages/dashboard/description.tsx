import type { ReactElement } from "react";
import { NextPageWithLayout } from "../_app";
import DashboardLayout from "../../layouts/Dashboard";
import Head from "next/head";
import { SubmitHandler, useForm } from "react-hook-form";

type FormData = {
  nameOfevent: string;
  location: string;
  typeOfevent: string;
  submissionDeadline: string;
  startDate: string;
  endDate: string;
  academiespart: string;
  EventInfo: string;
  clientInfo: string;
};

const DashboardCreate: NextPageWithLayout = () => {
  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<FormData>();
  const onSubmit: SubmitHandler<FormData> = (data) => console.log(data);

  const handleFocus = (event: React.FocusEvent<HTMLInputElement>) => {
    const input = event.target as HTMLInputElement;
    input.type = "date";
  };
  return (
    <>
      <Head>
        <title>Dashboard - Create</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className=" md:w-7/12 w-11/12 mx-auto  py-10">
        <form onSubmit={handleSubmit(onSubmit)} className="flex-col space-y-7">
          <div className="flex justify-between items-center gap-5">
            <input
              type="text"
              id="location"
              placeholder="Location"
              {...register("location", { required: true })}
              className="bg-gray-50 border border-black text-gray-900 text-base rounded-lg  block w-full p-2.5 "
            />
            {errors.location && (
              <span className="text-red-700 font-bold">
                location is required
              </span>
            )}

            <input
              type="text"
              id="typeOfevent"
              placeholder="Type of event"
              {...register("typeOfevent", { required: true })}
              className="bg-gray-50 border border-black text-gray-900 text-base rounded-lg   block w-full p-2.5 "
            />
            {errors.typeOfevent && (
              <span className="text-red-700 font-bold">
                type of event is required
              </span>
            )}
          </div>
          <div className="md:flex md:justify-between md:items-center md:gap-5 space-y-7">
            <div className="w-full">
              <input
                id="submissionDeadline"
                type="text"
                onFocus={handleFocus}
                placeholder="Submission deadline"
                {...register("submissionDeadline", { required: true })}
                className="bg-gray-50 border border-black text-gray-900 text-base rounded-lg   block w-full p-2.5  placeholder:w-full px-4 font-exoFont"
              />
              {errors.submissionDeadline && (
                <span className="text-red-700 font-bold">
                  Submission Deadline is required
                </span>
              )}
            </div>

            <div className="flex justify-between items-center gap-5 w-full">
              <input
                id="startDate"
                type="text"
                onFocus={handleFocus}
                placeholder="Event duration from"
                {...register("startDate", { required: true })}
                className="bg-gray-50 border border-black text-gray-900 text-base rounded-lg  block w-full p-2.5   placeholder:w-full md:px-4 px-2 font-exoFont"
              />
              {errors.startDate && (
                <span className="text-red-700 font-bold">
                  Start Date Deadline is required
                </span>
              )}

              <input
                id="endDate"
                type="text"
                onFocus={handleFocus}
                placeholder="Event duration to"
                {...register("endDate", { required: true })}
                className="bg-gray-50 border border-black text-gray-900 text-base rounded-lg  block w-full p-2.5   placeholder:w-full md:px-4 px-2 font-exoFont"
              />
              {errors.endDate && (
                <span className="text-red-700 font-bold">
                  End Date Deadline is required
                </span>
              )}
            </div>
          </div>
          <input
            type="text"
            id="academiespart"
            placeholder="Academies part of the event"
            {...register("academiespart", { required: true })}
            className="bg-gray-50 border border-black text-gray-900 text-base rounded-lg  block w-full p-2.5 "
          />
          {errors.academiespart && (
            <span className="text-red-700 font-bold">
              Academies part of the event is required
            </span>
          )}
          <textarea
            id="EventInfo"
            placeholder="Event info"
            {...register("EventInfo", { required: true, maxLength: 1000 })}
            className="bg-gray-50 border border-black text-gray-900 text-base rounded-lg block w-full p-14"
          />
          {errors.EventInfo && (
            <span className="text-red-700 font-bold">
              Event info is required
            </span>
          )}
          <textarea
            id="clientInfo "
            placeholder="Client info "
            {...register("clientInfo", { required: true, maxLength: 1000 })}
            className="bg-gray-50 border border-black text-gray-900 text-base rounded-lg block w-full p-14"
          />
          {errors.clientInfo && (
            <span className="text-red-700 font-bold">
              Client info is required
            </span>
          )}
          <div className=" flex items-center md:gap-5 gap-3">
            <div>
              <button className=" py-2 px-7 bg-white border-black border rounded-lg font-medium">
                Cansel
              </button>
            </div>
            <div className=" flex items-end gap-5 ml-auto">
              <button
                type="submit"
                className=" py-2 px-7 bg-greenis text-white rounded-lg font-bold"
              >
                Create
              </button>
              <button className="py-2 px-7 bg-gray-300 font-medium border-greenis border  text-greenis rounded-lg">
                Share
              </button>
            </div>
          </div>
        </form>
      </main>
    </>
  );
};

DashboardCreate.getLayout = function getLayout(page: ReactElement) {
  return <DashboardLayout>{page}</DashboardLayout>;
};

export default DashboardCreate;
